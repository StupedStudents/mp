	.file	"main.c"
	.intel_syntax noprefix
/APP
	.code16gcc

/NO_APP
	.text
	.globl	__main
	.def	__main;	.scl	2;	.type	32;	.endef
__main:
LFB0:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	sub	esp, 40
	mov	DWORD PTR [esp], 258
	call	_setVmode
	mov	WORD PTR [ebp-10], 0
	call	_drawScreen
	call	_drawMenu
	call	_keys
	jmp	L10
L11:
	nop
L10:
	call	_getKey
	mov	BYTE PTR [ebp-11], al
	cmp	BYTE PTR [ebp-11], 48
	jle	L2
	cmp	BYTE PTR [ebp-11], 52
	jg	L2
	movsx	eax, BYTE PTR [ebp-11]
	mov	DWORD PTR [esp], eax
	call	_choseBut
	mov	WORD PTR [ebp-10], ax
	jmp	L3
L2:
	cmp	BYTE PTR [ebp-11], 13
	jne	L11
	mov	DWORD PTR [esp], 1
	call	_clrTxt
	movzx	eax, WORD PTR [ebp-10]
	cmp	eax, 2
	je	L6
	cmp	eax, 2
	jg	L9
	cmp	eax, 1
	je	L5
	jmp	L4
L9:
	cmp	eax, 3
	je	L7
	cmp	eax, 4
	je	L8
	jmp	L4
L5:
	mov	DWORD PTR [esp+4], 4
	mov	DWORD PTR [esp], 1
	call	_driveStatus
	jmp	L3
L6:
	call	_timeAndDate
	jmp	L3
L7:
	call	_AlarmClock
	jmp	L3
L8:
	call	_powOff
	jmp	L3
L4:
	nop
L3:
	jmp	L11
	.cfi_endproc
LFE0:
	.globl	_drawScreen
	.def	_drawScreen;	.scl	2;	.type	32;	.endef
_drawScreen:
LFB1:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	sub	esp, 56
	mov	DWORD PTR [ebp-17], 0
	mov	DWORD PTR [ebp-13], 0
	mov	BYTE PTR [ebp-17], 80
	mov	BYTE PTR [ebp-16], 114
	mov	BYTE PTR [ebp-15], 101
	mov	BYTE PTR [ebp-14], 115
	mov	BYTE PTR [ebp-13], 115
	mov	BYTE PTR [ebp-12], 32
	mov	BYTE PTR [ebp-11], 88
	mov	BYTE PTR [ebp-10], 0
	mov	DWORD PTR [esp+24], 15
	mov	DWORD PTR [esp+20], 4
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 700
	mov	DWORD PTR [esp+8], 500
	mov	DWORD PTR [esp+4], 50
	mov	DWORD PTR [esp], 50
	call	_drawRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 130
	mov	DWORD PTR [esp+8], 400
	mov	DWORD PTR [esp+4], 100
	mov	DWORD PTR [esp], 90
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 130
	mov	DWORD PTR [esp+8], 400
	mov	DWORD PTR [esp+4], 100
	mov	DWORD PTR [esp], 245
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 130
	mov	DWORD PTR [esp+8], 400
	mov	DWORD PTR [esp+4], 100
	mov	DWORD PTR [esp], 425
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 130
	mov	DWORD PTR [esp+8], 400
	mov	DWORD PTR [esp+4], 100
	mov	DWORD PTR [esp], 580
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 110
	mov	DWORD PTR [esp+8], 170
	mov	DWORD PTR [esp+4], 120
	mov	DWORD PTR [esp], 110
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 110
	mov	DWORD PTR [esp+8], 170
	mov	DWORD PTR [esp+4], 310
	mov	DWORD PTR [esp], 90
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 110
	mov	DWORD PTR [esp+8], 380
	mov	DWORD PTR [esp+4], 100
	mov	DWORD PTR [esp], 265
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 90
	mov	DWORD PTR [esp+8], 360
	mov	DWORD PTR [esp+4], 120
	mov	DWORD PTR [esp], 445
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 110
	mov	DWORD PTR [esp+8], 170
	mov	DWORD PTR [esp+4], 120
	mov	DWORD PTR [esp], 600
	call	_drawFillRect
	mov	DWORD PTR [esp+20], 182
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 110
	mov	DWORD PTR [esp+8], 170
	mov	DWORD PTR [esp+4], 310
	mov	DWORD PTR [esp], 580
	call	_drawFillRect
	mov	DWORD PTR [esp+16], 0
	mov	DWORD PTR [esp+12], 5
	mov	DWORD PTR [esp+8], 45
	mov	DWORD PTR [esp+4], 32
	lea	eax, [ebp-17]
	mov	DWORD PTR [esp], eax
	call	_outStr
	jmp	L13
L14:
	call	_getKey
	mov	BYTE PTR [ebp-9], al
L13:
	cmp	BYTE PTR [ebp-9], 120
	jne	L14
	mov	DWORD PTR [esp], 258
	call	_setVmode
	mov	DWORD PTR [esp], 1
	call	_setPage
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1:
	.globl	_keys
	.def	_keys;	.scl	2;	.type	32;	.endef
_keys:
LFB2:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	sub	esp, 224
	lea	ebx, [ebp-185]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 177
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-185], 80
	mov	BYTE PTR [ebp-184], 114
	mov	BYTE PTR [ebp-183], 101
	mov	BYTE PTR [ebp-182], 115
	mov	BYTE PTR [ebp-181], 115
	mov	BYTE PTR [ebp-180], 32
	mov	BYTE PTR [ebp-179], 49
	mov	BYTE PTR [ebp-178], 32
	mov	BYTE PTR [ebp-177], 116
	mov	BYTE PTR [ebp-176], 111
	mov	BYTE PTR [ebp-175], 32
	mov	BYTE PTR [ebp-174], 119
	mov	BYTE PTR [ebp-173], 97
	mov	BYTE PTR [ebp-172], 116
	mov	BYTE PTR [ebp-171], 99
	mov	BYTE PTR [ebp-170], 104
	mov	BYTE PTR [ebp-169], 32
	mov	BYTE PTR [ebp-168], 105
	mov	BYTE PTR [ebp-167], 110
	mov	BYTE PTR [ebp-166], 102
	mov	BYTE PTR [ebp-165], 111
	mov	BYTE PTR [ebp-164], 32
	mov	BYTE PTR [ebp-163], 97
	mov	BYTE PTR [ebp-162], 98
	mov	BYTE PTR [ebp-161], 111
	mov	BYTE PTR [ebp-160], 117
	mov	BYTE PTR [ebp-159], 116
	mov	BYTE PTR [ebp-158], 32
	mov	BYTE PTR [ebp-157], 100
	mov	BYTE PTR [ebp-156], 114
	mov	BYTE PTR [ebp-155], 105
	mov	BYTE PTR [ebp-154], 118
	mov	BYTE PTR [ebp-153], 101
	mov	BYTE PTR [ebp-152], 32
	mov	BYTE PTR [ebp-151], 116
	mov	BYTE PTR [ebp-150], 121
	mov	BYTE PTR [ebp-149], 112
	mov	BYTE PTR [ebp-148], 101
	mov	BYTE PTR [ebp-147], 32
	mov	BYTE PTR [ebp-146], 97
	mov	BYTE PTR [ebp-145], 110
	mov	BYTE PTR [ebp-144], 100
	mov	BYTE PTR [ebp-143], 32
	mov	BYTE PTR [ebp-142], 116
	mov	BYTE PTR [ebp-141], 104
	mov	BYTE PTR [ebp-140], 101
	mov	BYTE PTR [ebp-139], 105
	mov	BYTE PTR [ebp-138], 114
	mov	BYTE PTR [ebp-137], 32
	mov	BYTE PTR [ebp-136], 110
	mov	BYTE PTR [ebp-135], 117
	mov	BYTE PTR [ebp-134], 109
	mov	BYTE PTR [ebp-133], 98
	mov	BYTE PTR [ebp-132], 101
	mov	BYTE PTR [ebp-131], 114
	mov	BYTE PTR [ebp-130], 10
	mov	BYTE PTR [ebp-129], 80
	mov	BYTE PTR [ebp-128], 114
	mov	BYTE PTR [ebp-127], 101
	mov	BYTE PTR [ebp-126], 115
	mov	BYTE PTR [ebp-125], 115
	mov	BYTE PTR [ebp-124], 32
	mov	BYTE PTR [ebp-123], 50
	mov	BYTE PTR [ebp-122], 32
	mov	BYTE PTR [ebp-121], 116
	mov	BYTE PTR [ebp-120], 111
	mov	BYTE PTR [ebp-119], 32
	mov	BYTE PTR [ebp-118], 119
	mov	BYTE PTR [ebp-117], 97
	mov	BYTE PTR [ebp-116], 116
	mov	BYTE PTR [ebp-115], 99
	mov	BYTE PTR [ebp-114], 104
	mov	BYTE PTR [ebp-113], 32
	mov	BYTE PTR [ebp-112], 99
	mov	BYTE PTR [ebp-111], 117
	mov	BYTE PTR [ebp-110], 114
	mov	BYTE PTR [ebp-109], 114
	mov	BYTE PTR [ebp-108], 101
	mov	BYTE PTR [ebp-107], 110
	mov	BYTE PTR [ebp-106], 116
	mov	BYTE PTR [ebp-105], 32
	mov	BYTE PTR [ebp-104], 116
	mov	BYTE PTR [ebp-103], 105
	mov	BYTE PTR [ebp-102], 109
	mov	BYTE PTR [ebp-101], 101
	mov	BYTE PTR [ebp-100], 10
	mov	BYTE PTR [ebp-99], 80
	mov	BYTE PTR [ebp-98], 114
	mov	BYTE PTR [ebp-97], 101
	mov	BYTE PTR [ebp-96], 115
	mov	BYTE PTR [ebp-95], 115
	mov	BYTE PTR [ebp-94], 32
	mov	BYTE PTR [ebp-93], 51
	mov	BYTE PTR [ebp-92], 32
	mov	BYTE PTR [ebp-91], 116
	mov	BYTE PTR [ebp-90], 111
	mov	BYTE PTR [ebp-89], 32
	mov	BYTE PTR [ebp-88], 115
	mov	BYTE PTR [ebp-87], 101
	mov	BYTE PTR [ebp-86], 116
	mov	BYTE PTR [ebp-85], 32
	mov	BYTE PTR [ebp-84], 97
	mov	BYTE PTR [ebp-83], 108
	mov	BYTE PTR [ebp-82], 97
	mov	BYTE PTR [ebp-81], 114
	mov	BYTE PTR [ebp-80], 109
	mov	BYTE PTR [ebp-79], 10
	mov	BYTE PTR [ebp-78], 80
	mov	BYTE PTR [ebp-77], 114
	mov	BYTE PTR [ebp-76], 101
	mov	BYTE PTR [ebp-75], 115
	mov	BYTE PTR [ebp-74], 115
	mov	BYTE PTR [ebp-73], 32
	mov	BYTE PTR [ebp-72], 52
	mov	BYTE PTR [ebp-71], 32
	mov	BYTE PTR [ebp-70], 116
	mov	BYTE PTR [ebp-69], 111
	mov	BYTE PTR [ebp-68], 32
	mov	BYTE PTR [ebp-67], 115
	mov	BYTE PTR [ebp-66], 104
	mov	BYTE PTR [ebp-65], 117
	mov	BYTE PTR [ebp-64], 116
	mov	BYTE PTR [ebp-63], 32
	mov	BYTE PTR [ebp-62], 100
	mov	BYTE PTR [ebp-61], 111
	mov	BYTE PTR [ebp-60], 119
	mov	BYTE PTR [ebp-59], 110
	mov	BYTE PTR [ebp-58], 32
	mov	BYTE PTR [ebp-57], 116
	mov	BYTE PTR [ebp-56], 104
	mov	BYTE PTR [ebp-55], 101
	mov	BYTE PTR [ebp-54], 32
	mov	BYTE PTR [ebp-53], 79
	mov	BYTE PTR [ebp-52], 83
	mov	BYTE PTR [ebp-51], 10
	mov	BYTE PTR [ebp-50], 84
	mov	BYTE PTR [ebp-49], 111
	mov	BYTE PTR [ebp-48], 32
	mov	BYTE PTR [ebp-47], 99
	mov	BYTE PTR [ebp-46], 111
	mov	BYTE PTR [ebp-45], 110
	mov	BYTE PTR [ebp-44], 102
	mov	BYTE PTR [ebp-43], 105
	mov	BYTE PTR [ebp-42], 114
	mov	BYTE PTR [ebp-41], 109
	mov	BYTE PTR [ebp-40], 32
	mov	BYTE PTR [ebp-39], 116
	mov	BYTE PTR [ebp-38], 104
	mov	BYTE PTR [ebp-37], 101
	mov	BYTE PTR [ebp-36], 32
	mov	BYTE PTR [ebp-35], 115
	mov	BYTE PTR [ebp-34], 101
	mov	BYTE PTR [ebp-33], 108
	mov	BYTE PTR [ebp-32], 101
	mov	BYTE PTR [ebp-31], 99
	mov	BYTE PTR [ebp-30], 116
	mov	BYTE PTR [ebp-29], 105
	mov	BYTE PTR [ebp-28], 111
	mov	BYTE PTR [ebp-27], 110
	mov	BYTE PTR [ebp-26], 44
	mov	BYTE PTR [ebp-25], 32
	mov	BYTE PTR [ebp-24], 112
	mov	BYTE PTR [ebp-23], 114
	mov	BYTE PTR [ebp-22], 101
	mov	BYTE PTR [ebp-21], 115
	mov	BYTE PTR [ebp-20], 115
	mov	BYTE PTR [ebp-19], 32
	mov	BYTE PTR [ebp-18], 101
	mov	BYTE PTR [ebp-17], 110
	mov	BYTE PTR [ebp-16], 116
	mov	BYTE PTR [ebp-15], 101
	mov	BYTE PTR [ebp-14], 114
	mov	BYTE PTR [ebp-9], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 4
	mov	DWORD PTR [esp+8], 5
	mov	DWORD PTR [esp+4], 18
	lea	eax, [ebp-185]
	mov	DWORD PTR [esp], eax
	call	_outStr
	add	esp, 224
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE2:
	.globl	_AlarmClock
	.def	_AlarmClock;	.scl	2;	.type	32;	.endef
_AlarmClock:
LFB3:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	sub	esp, 64
	lea	ebx, [ebp-30]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 22
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-30], 83
	mov	BYTE PTR [ebp-29], 101
	mov	BYTE PTR [ebp-28], 116
	mov	BYTE PTR [ebp-27], 32
	mov	BYTE PTR [ebp-26], 65
	mov	BYTE PTR [ebp-25], 108
	mov	BYTE PTR [ebp-24], 97
	mov	BYTE PTR [ebp-23], 114
	mov	BYTE PTR [ebp-22], 109
	mov	BYTE PTR [ebp-21], 40
	mov	BYTE PTR [ebp-20], 104
	mov	BYTE PTR [ebp-19], 104
	mov	BYTE PTR [ebp-18], 32
	mov	BYTE PTR [ebp-17], 109
	mov	BYTE PTR [ebp-16], 109
	mov	BYTE PTR [ebp-15], 32
	mov	BYTE PTR [ebp-14], 115
	mov	BYTE PTR [ebp-13], 115
	mov	BYTE PTR [ebp-12], 41
	mov	BYTE PTR [ebp-11], 58
	mov	BYTE PTR [ebp-10], 32
	mov	BYTE PTR [ebp-9], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 4
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-30]
	mov	DWORD PTR [esp], eax
	call	_outStr
	call	_setAlarm
/APP
 # 115 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	add	esp, 64
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE3:
	.globl	_timeAndDate
	.def	_timeAndDate;	.scl	2;	.type	32;	.endef
_timeAndDate:
LFB4:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	sub	esp, 48
	lea	ebx, [ebp-23]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 15
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-23], 67
	mov	BYTE PTR [ebp-22], 117
	mov	BYTE PTR [ebp-21], 114
	mov	BYTE PTR [ebp-20], 114
	mov	BYTE PTR [ebp-19], 101
	mov	BYTE PTR [ebp-18], 110
	mov	BYTE PTR [ebp-17], 116
	mov	BYTE PTR [ebp-16], 32
	mov	BYTE PTR [ebp-15], 116
	mov	BYTE PTR [ebp-14], 105
	mov	BYTE PTR [ebp-13], 109
	mov	BYTE PTR [ebp-12], 101
	mov	BYTE PTR [ebp-11], 58
	mov	BYTE PTR [ebp-10], 32
	mov	BYTE PTR [ebp-9], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 4
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-23]
	mov	DWORD PTR [esp], eax
	call	_outStr
	mov	DWORD PTR [esp+8], 79
	mov	DWORD PTR [esp+4], 2
	mov	DWORD PTR [esp], 1
	call	_setPos
	mov	DWORD PTR [esp+12], 1
	mov	DWORD PTR [esp+8], 4
	mov	DWORD PTR [esp+4], 1
	mov	DWORD PTR [esp], 50
	call	_setChar
	mov	DWORD PTR [esp+8], 80
	mov	DWORD PTR [esp+4], 2
	mov	DWORD PTR [esp], 1
	call	_setPos
	mov	DWORD PTR [esp+12], 1
	mov	DWORD PTR [esp+8], 4
	mov	DWORD PTR [esp+4], 1
	mov	DWORD PTR [esp], 48
	call	_setChar
	mov	DWORD PTR [esp+8], 81
	mov	DWORD PTR [esp+4], 2
	mov	DWORD PTR [esp], 1
	call	_setPos
	call	_outTime
/APP
 # 130 "main.c" 1
	add sp,12
 # 0 "" 2
/NO_APP
	add	esp, 48
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE4:
	.globl	_clrTxt
	.def	_clrTxt;	.scl	2;	.type	32;	.endef
_clrTxt:
LFB5:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	sub	esp, 96
	mov	eax, DWORD PTR [ebp+8]
	mov	WORD PTR [ebp-60], ax
	lea	ebx, [ebp-48]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 40
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-48], 32
	mov	BYTE PTR [ebp-47], 32
	mov	BYTE PTR [ebp-46], 32
	mov	BYTE PTR [ebp-45], 32
	mov	BYTE PTR [ebp-44], 32
	mov	BYTE PTR [ebp-43], 32
	mov	BYTE PTR [ebp-42], 32
	mov	BYTE PTR [ebp-41], 32
	mov	BYTE PTR [ebp-40], 32
	mov	BYTE PTR [ebp-39], 32
	mov	BYTE PTR [ebp-38], 32
	mov	BYTE PTR [ebp-37], 32
	mov	BYTE PTR [ebp-36], 32
	mov	BYTE PTR [ebp-35], 32
	mov	BYTE PTR [ebp-34], 32
	mov	BYTE PTR [ebp-33], 32
	mov	BYTE PTR [ebp-32], 32
	mov	BYTE PTR [ebp-31], 32
	mov	BYTE PTR [ebp-30], 32
	mov	BYTE PTR [ebp-29], 32
	mov	BYTE PTR [ebp-28], 32
	mov	BYTE PTR [ebp-27], 32
	mov	BYTE PTR [ebp-26], 32
	mov	BYTE PTR [ebp-25], 32
	mov	BYTE PTR [ebp-24], 32
	mov	BYTE PTR [ebp-23], 32
	mov	BYTE PTR [ebp-22], 32
	mov	BYTE PTR [ebp-21], 32
	mov	BYTE PTR [ebp-20], 32
	mov	BYTE PTR [ebp-19], 32
	mov	BYTE PTR [ebp-18], 32
	mov	BYTE PTR [ebp-17], 32
	mov	BYTE PTR [ebp-16], 32
	mov	BYTE PTR [ebp-15], 32
	mov	BYTE PTR [ebp-14], 32
	mov	BYTE PTR [ebp-13], 32
	mov	BYTE PTR [ebp-12], 32
	mov	BYTE PTR [ebp-11], 32
	mov	BYTE PTR [ebp-10], 32
	mov	BYTE PTR [ebp-9], 0
	movzx	eax, WORD PTR [ebp-60]
	mov	DWORD PTR [esp+16], eax
	mov	DWORD PTR [esp+12], 0
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-48]
	mov	DWORD PTR [esp], eax
	call	_outStr
	movzx	eax, WORD PTR [ebp-60]
	mov	DWORD PTR [esp+16], eax
	mov	DWORD PTR [esp+12], 0
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 3
	lea	eax, [ebp-48]
	mov	DWORD PTR [esp], eax
	call	_outStr
	movzx	eax, WORD PTR [ebp-60]
	mov	DWORD PTR [esp+16], eax
	mov	DWORD PTR [esp+12], 0
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 4
	lea	eax, [ebp-48]
	mov	DWORD PTR [esp], eax
	call	_outStr
	movzx	eax, WORD PTR [ebp-60]
	mov	DWORD PTR [esp+16], eax
	mov	DWORD PTR [esp+12], 0
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 5
	lea	eax, [ebp-48]
	mov	DWORD PTR [esp], eax
	call	_outStr
	add	esp, 96
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE5:
	.globl	_driveStatus
	.def	_driveStatus;	.scl	2;	.type	32;	.endef
_driveStatus:
LFB6:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	sub	esp, 160
	mov	edx, DWORD PTR [ebp+8]
	mov	eax, DWORD PTR [ebp+12]
	mov	WORD PTR [ebp-124], dx
	mov	WORD PTR [ebp-128], ax
	lea	ebx, [ebp-30]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 18
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-30], 68
	mov	BYTE PTR [ebp-29], 114
	mov	BYTE PTR [ebp-28], 105
	mov	BYTE PTR [ebp-27], 118
	mov	BYTE PTR [ebp-26], 101
	mov	BYTE PTR [ebp-25], 32
	mov	BYTE PTR [ebp-24], 110
	mov	BYTE PTR [ebp-23], 111
	mov	BYTE PTR [ebp-22], 116
	mov	BYTE PTR [ebp-21], 32
	mov	BYTE PTR [ebp-20], 112
	mov	BYTE PTR [ebp-19], 114
	mov	BYTE PTR [ebp-18], 101
	mov	BYTE PTR [ebp-17], 115
	mov	BYTE PTR [ebp-16], 101
	mov	BYTE PTR [ebp-15], 110
	mov	BYTE PTR [ebp-14], 116
	mov	BYTE PTR [ebp-13], 0
	lea	ebx, [ebp-58]
	mov	al, 0
	mov	edx, 28
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-58], 68
	mov	BYTE PTR [ebp-57], 105
	mov	BYTE PTR [ebp-56], 115
	mov	BYTE PTR [ebp-55], 107
	mov	BYTE PTR [ebp-54], 101
	mov	BYTE PTR [ebp-53], 116
	mov	BYTE PTR [ebp-52], 116
	mov	BYTE PTR [ebp-51], 101
	mov	BYTE PTR [ebp-50], 44
	mov	BYTE PTR [ebp-49], 32
	mov	BYTE PTR [ebp-48], 110
	mov	BYTE PTR [ebp-47], 111
	mov	BYTE PTR [ebp-46], 32
	mov	BYTE PTR [ebp-45], 99
	mov	BYTE PTR [ebp-44], 104
	mov	BYTE PTR [ebp-43], 97
	mov	BYTE PTR [ebp-42], 110
	mov	BYTE PTR [ebp-41], 103
	mov	BYTE PTR [ebp-40], 101
	mov	BYTE PTR [ebp-39], 32
	mov	BYTE PTR [ebp-38], 112
	mov	BYTE PTR [ebp-37], 114
	mov	BYTE PTR [ebp-36], 101
	mov	BYTE PTR [ebp-35], 115
	mov	BYTE PTR [ebp-34], 101
	mov	BYTE PTR [ebp-33], 110
	mov	BYTE PTR [ebp-32], 116
	mov	BYTE PTR [ebp-31], 0
	lea	ebx, [ebp-93]
	mov	al, 0
	mov	edx, 35
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-93], 68
	mov	BYTE PTR [ebp-92], 105
	mov	BYTE PTR [ebp-91], 115
	mov	BYTE PTR [ebp-90], 107
	mov	BYTE PTR [ebp-89], 101
	mov	BYTE PTR [ebp-88], 116
	mov	BYTE PTR [ebp-87], 116
	mov	BYTE PTR [ebp-86], 101
	mov	BYTE PTR [ebp-85], 44
	mov	BYTE PTR [ebp-84], 32
	mov	BYTE PTR [ebp-83], 99
	mov	BYTE PTR [ebp-82], 104
	mov	BYTE PTR [ebp-81], 97
	mov	BYTE PTR [ebp-80], 110
	mov	BYTE PTR [ebp-79], 103
	mov	BYTE PTR [ebp-78], 101
	mov	BYTE PTR [ebp-77], 32
	mov	BYTE PTR [ebp-76], 100
	mov	BYTE PTR [ebp-75], 101
	mov	BYTE PTR [ebp-74], 116
	mov	BYTE PTR [ebp-73], 101
	mov	BYTE PTR [ebp-72], 99
	mov	BYTE PTR [ebp-71], 116
	mov	BYTE PTR [ebp-70], 105
	mov	BYTE PTR [ebp-69], 111
	mov	BYTE PTR [ebp-68], 110
	mov	BYTE PTR [ebp-67], 32
	mov	BYTE PTR [ebp-66], 112
	mov	BYTE PTR [ebp-65], 114
	mov	BYTE PTR [ebp-64], 101
	mov	BYTE PTR [ebp-63], 115
	mov	BYTE PTR [ebp-62], 101
	mov	BYTE PTR [ebp-61], 110
	mov	BYTE PTR [ebp-60], 116
	mov	BYTE PTR [ebp-59], 0
	lea	ebx, [ebp-112]
	mov	al, 0
	mov	edx, 19
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-112], 70
	mov	BYTE PTR [ebp-111], 105
	mov	BYTE PTR [ebp-110], 120
	mov	BYTE PTR [ebp-109], 101
	mov	BYTE PTR [ebp-108], 100
	mov	BYTE PTR [ebp-107], 32
	mov	BYTE PTR [ebp-106], 100
	mov	BYTE PTR [ebp-105], 105
	mov	BYTE PTR [ebp-104], 115
	mov	BYTE PTR [ebp-103], 107
	mov	BYTE PTR [ebp-102], 32
	mov	BYTE PTR [ebp-101], 112
	mov	BYTE PTR [ebp-100], 114
	mov	BYTE PTR [ebp-99], 101
	mov	BYTE PTR [ebp-98], 115
	mov	BYTE PTR [ebp-97], 101
	mov	BYTE PTR [ebp-96], 110
	mov	BYTE PTR [ebp-95], 116
	mov	BYTE PTR [ebp-94], 0
	lea	ebx, [ebp-119]
	mov	al, 0
	mov	edx, 7
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-119], 68
	mov	BYTE PTR [ebp-118], 114
	mov	BYTE PTR [ebp-117], 105
	mov	BYTE PTR [ebp-116], 118
	mov	BYTE PTR [ebp-115], 101
	mov	BYTE PTR [ebp-114], 115
	mov	BYTE PTR [ebp-113], 0
	call	_hardType
	movzx	eax, ax
	mov	DWORD PTR [ebp-12], eax
	mov	eax, DWORD PTR [ebp-12]
	cmp	eax, 1
	je	L22
	cmp	eax, 1
	jg	L25
	test	eax, eax
	je	L21
	jmp	L20
L25:
	cmp	eax, 2
	je	L23
	cmp	eax, 3
	je	L24
	jmp	L20
L21:
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-30]
	mov	DWORD PTR [esp], eax
	call	_outStr
	jmp	L26
L22:
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-58]
	mov	DWORD PTR [esp], eax
	call	_outStr
	jmp	L26
L23:
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-93]
	mov	DWORD PTR [esp], eax
	call	_outStr
	jmp	L26
L24:
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-112]
	mov	DWORD PTR [esp], eax
	call	_outStr
	jmp	L26
L20:
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 2
	lea	eax, [ebp-30]
	mov	DWORD PTR [esp], eax
	call	_outStr
	nop
L26:
	call	_countDrives
	movzx	eax, ax
	mov	DWORD PTR [ebp-12], eax
	movzx	eax, WORD PTR [ebp-124]
	mov	DWORD PTR [esp+8], 65
	mov	DWORD PTR [esp+4], 3
	mov	DWORD PTR [esp], eax
	call	_setPos
	movzx	ecx, WORD PTR [ebp-124]
	movzx	edx, WORD PTR [ebp-128]
	mov	eax, DWORD PTR [ebp-12]
	add	eax, 48
	movsx	eax, al
	mov	DWORD PTR [esp+12], ecx
	mov	DWORD PTR [esp+8], edx
	mov	DWORD PTR [esp+4], 1
	mov	DWORD PTR [esp], eax
	call	_setChar
	movzx	edx, WORD PTR [ebp-124]
	movzx	eax, WORD PTR [ebp-128]
	mov	DWORD PTR [esp+16], edx
	mov	DWORD PTR [esp+12], eax
	mov	DWORD PTR [esp+8], 67
	mov	DWORD PTR [esp+4], 3
	lea	eax, [ebp-119]
	mov	DWORD PTR [esp], eax
	call	_outStr
/APP
 # 181 "main.c" 1
	add sp,8
 # 0 "" 2
/NO_APP
	add	esp, 160
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE6:
	.globl	_clrBut
	.def	_clrBut;	.scl	2;	.type	32;	.endef
_clrBut:
LFB7:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	sub	esp, 40
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 101
	mov	DWORD PTR [esp], 93
	call	_drawRect
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 197
	mov	DWORD PTR [esp], 93
	call	_drawRect
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 101
	mov	DWORD PTR [esp], 293
	call	_drawRect
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 0
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 197
	mov	DWORD PTR [esp], 293
	call	_drawRect
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE7:
	.globl	_choseBut
	.def	_choseBut;	.scl	2;	.type	32;	.endef
_choseBut:
LFB8:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	sub	esp, 72
	mov	eax, DWORD PTR [ebp+8]
	mov	BYTE PTR [ebp-28], al
	call	_clrBut
	movsx	eax, BYTE PTR [ebp-28]
	cmp	eax, 50
	je	L31
	cmp	eax, 50
	jg	L34
	cmp	eax, 49
	je	L30
	jmp	L29
L34:
	cmp	eax, 51
	je	L32
	cmp	eax, 52
	je	L33
	jmp	L29
L30:
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 7
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 101
	mov	DWORD PTR [esp], 93
	call	_drawRect
	mov	WORD PTR [ebp-10], 1
	jmp	L35
L31:
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 7
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 197
	mov	DWORD PTR [esp], 93
	call	_drawRect
	mov	WORD PTR [ebp-10], 2
	jmp	L35
L32:
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 7
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 101
	mov	DWORD PTR [esp], 293
	call	_drawRect
	mov	WORD PTR [ebp-10], 3
	jmp	L35
L33:
	mov	DWORD PTR [esp+24], 4
	mov	DWORD PTR [esp+20], 7
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 109
	mov	DWORD PTR [esp+8], 53
	mov	DWORD PTR [esp+4], 197
	mov	DWORD PTR [esp], 293
	call	_drawRect
	mov	WORD PTR [ebp-10], 4
	jmp	L35
L29:
	mov	WORD PTR [ebp-10], 5
	nop
L35:
	mov	ax, WORD PTR [ebp-10]
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE8:
	.globl	_outStr
	.def	_outStr;	.scl	2;	.type	32;	.endef
_outStr:
LFB9:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	ebx
	sub	esp, 52
	mov	ebx, DWORD PTR [ebp+12]
	.cfi_offset 3, -12
	mov	ecx, DWORD PTR [ebp+16]
	mov	edx, DWORD PTR [ebp+20]
	mov	eax, DWORD PTR [ebp+24]
	mov	WORD PTR [ebp-28], bx
	mov	WORD PTR [ebp-32], cx
	mov	WORD PTR [ebp-36], dx
	mov	WORD PTR [ebp-40], ax
	movzx	eax, WORD PTR [ebp-32]
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], 0
	jmp	L37
L40:
	mov	eax, DWORD PTR [ebp-12]
	add	eax, DWORD PTR [ebp+8]
	mov	al, BYTE PTR [eax]
	cmp	al, 10
	jne	L38
	inc	WORD PTR [ebp-28]
	movzx	eax, WORD PTR [ebp-32]
	mov	DWORD PTR [ebp-16], eax
	jmp	L39
L38:
	mov	eax, DWORD PTR [ebp-16]
	movzx	ecx, ax
	movzx	edx, WORD PTR [ebp-28]
	movzx	eax, WORD PTR [ebp-40]
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPos
/APP
 # 234 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	movzx	ecx, WORD PTR [ebp-40]
	movzx	edx, WORD PTR [ebp-36]
	mov	eax, DWORD PTR [ebp-12]
	add	eax, DWORD PTR [ebp+8]
	mov	al, BYTE PTR [eax]
	movsx	eax, al
	mov	DWORD PTR [esp+12], ecx
	mov	DWORD PTR [esp+8], edx
	mov	DWORD PTR [esp+4], 1
	mov	DWORD PTR [esp], eax
	call	_setChar
/APP
 # 236 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	inc	DWORD PTR [ebp-16]
L39:
	inc	DWORD PTR [ebp-12]
L37:
	mov	eax, DWORD PTR [ebp-12]
	add	eax, DWORD PTR [ebp+8]
	mov	al, BYTE PTR [eax]
	test	al, al
	jne	L40
	add	esp, 52
	pop	ebx
	.cfi_restore 3
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE9:
	.globl	_drawMenu
	.def	_drawMenu;	.scl	2;	.type	32;	.endef
_drawMenu:
LFB10:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	ebx
	add	esp, -128
	lea	ebx, [ebp-104]
	.cfi_offset 3, -16
	.cfi_offset 7, -12
	mov	al, 0
	mov	edx, 96
	mov	edi, ebx
	mov	ecx, edx
	rep stosb
	mov	BYTE PTR [ebp-104], 32
	mov	BYTE PTR [ebp-103], 32
	mov	BYTE PTR [ebp-102], 49
	mov	BYTE PTR [ebp-101], 46
	mov	BYTE PTR [ebp-100], 72
	mov	BYTE PTR [ebp-99], 97
	mov	BYTE PTR [ebp-98], 114
	mov	BYTE PTR [ebp-97], 100
	mov	BYTE PTR [ebp-96], 32
	mov	BYTE PTR [ebp-95], 32
	mov	BYTE PTR [ebp-94], 32
	mov	BYTE PTR [ebp-93], 10
	mov	BYTE PTR [ebp-92], 32
	mov	BYTE PTR [ebp-91], 32
	mov	BYTE PTR [ebp-90], 68
	mov	BYTE PTR [ebp-89], 114
	mov	BYTE PTR [ebp-88], 105
	mov	BYTE PTR [ebp-87], 118
	mov	BYTE PTR [ebp-86], 101
	mov	BYTE PTR [ebp-85], 115
	mov	BYTE PTR [ebp-84], 32
	mov	BYTE PTR [ebp-83], 32
	mov	BYTE PTR [ebp-82], 32
	mov	BYTE PTR [ebp-80], 32
	mov	BYTE PTR [ebp-79], 32
	mov	BYTE PTR [ebp-78], 50
	mov	BYTE PTR [ebp-77], 46
	mov	BYTE PTR [ebp-76], 68
	mov	BYTE PTR [ebp-75], 97
	mov	BYTE PTR [ebp-74], 116
	mov	BYTE PTR [ebp-73], 101
	mov	BYTE PTR [ebp-72], 32
	mov	BYTE PTR [ebp-71], 32
	mov	BYTE PTR [ebp-70], 32
	mov	BYTE PTR [ebp-69], 10
	mov	BYTE PTR [ebp-68], 32
	mov	BYTE PTR [ebp-67], 32
	mov	BYTE PTR [ebp-66], 32
	mov	BYTE PTR [ebp-65], 84
	mov	BYTE PTR [ebp-64], 105
	mov	BYTE PTR [ebp-63], 109
	mov	BYTE PTR [ebp-62], 101
	mov	BYTE PTR [ebp-61], 32
	mov	BYTE PTR [ebp-60], 32
	mov	BYTE PTR [ebp-59], 32
	mov	BYTE PTR [ebp-58], 32
	mov	BYTE PTR [ebp-56], 32
	mov	BYTE PTR [ebp-55], 32
	mov	BYTE PTR [ebp-54], 51
	mov	BYTE PTR [ebp-53], 46
	mov	BYTE PTR [ebp-52], 65
	mov	BYTE PTR [ebp-51], 108
	mov	BYTE PTR [ebp-50], 97
	mov	BYTE PTR [ebp-49], 114
	mov	BYTE PTR [ebp-48], 109
	mov	BYTE PTR [ebp-47], 32
	mov	BYTE PTR [ebp-46], 32
	mov	BYTE PTR [ebp-45], 10
	mov	BYTE PTR [ebp-44], 32
	mov	BYTE PTR [ebp-43], 32
	mov	BYTE PTR [ebp-42], 32
	mov	BYTE PTR [ebp-41], 67
	mov	BYTE PTR [ebp-40], 108
	mov	BYTE PTR [ebp-39], 111
	mov	BYTE PTR [ebp-38], 99
	mov	BYTE PTR [ebp-37], 107
	mov	BYTE PTR [ebp-36], 32
	mov	BYTE PTR [ebp-35], 32
	mov	BYTE PTR [ebp-34], 32
	mov	BYTE PTR [ebp-32], 32
	mov	BYTE PTR [ebp-31], 32
	mov	BYTE PTR [ebp-30], 52
	mov	BYTE PTR [ebp-29], 46
	mov	BYTE PTR [ebp-28], 83
	mov	BYTE PTR [ebp-27], 104
	mov	BYTE PTR [ebp-26], 117
	mov	BYTE PTR [ebp-25], 116
	mov	BYTE PTR [ebp-24], 32
	mov	BYTE PTR [ebp-23], 32
	mov	BYTE PTR [ebp-22], 32
	mov	BYTE PTR [ebp-21], 10
	mov	BYTE PTR [ebp-20], 32
	mov	BYTE PTR [ebp-19], 32
	mov	BYTE PTR [ebp-18], 32
	mov	BYTE PTR [ebp-17], 68
	mov	BYTE PTR [ebp-16], 111
	mov	BYTE PTR [ebp-15], 119
	mov	BYTE PTR [ebp-14], 110
	mov	BYTE PTR [ebp-13], 32
	mov	BYTE PTR [ebp-12], 32
	mov	BYTE PTR [ebp-11], 32
	mov	BYTE PTR [ebp-10], 32
	mov	BYTE PTR [ebp-81], 0
	mov	BYTE PTR [ebp-57], 0
	mov	BYTE PTR [ebp-33], 0
	mov	BYTE PTR [ebp-9], 0
	mov	DWORD PTR [esp+24], 7
	mov	DWORD PTR [esp+20], 4
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 101
	mov	DWORD PTR [esp+8], 45
	mov	DWORD PTR [esp+4], 105
	mov	DWORD PTR [esp], 97
	call	_drawRect
	mov	DWORD PTR [esp+24], 7
	mov	DWORD PTR [esp+20], 4
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 101
	mov	DWORD PTR [esp+8], 45
	mov	DWORD PTR [esp+4], 201
	mov	DWORD PTR [esp], 97
	call	_drawRect
	mov	DWORD PTR [esp+24], 7
	mov	DWORD PTR [esp+20], 4
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 101
	mov	DWORD PTR [esp+8], 45
	mov	DWORD PTR [esp+4], 105
	mov	DWORD PTR [esp], 297
	call	_drawRect
	mov	DWORD PTR [esp+24], 7
	mov	DWORD PTR [esp+20], 4
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 101
	mov	DWORD PTR [esp+8], 45
	mov	DWORD PTR [esp+4], 201
	mov	DWORD PTR [esp], 297
	call	_drawRect
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 182
	mov	DWORD PTR [esp+8], 13
	mov	DWORD PTR [esp+4], 7
	lea	eax, [ebp-104]
	mov	DWORD PTR [esp], eax
	call	_outStr
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 182
	mov	DWORD PTR [esp+8], 13
	mov	DWORD PTR [esp+4], 13
	lea	eax, [ebp-104]
	add	eax, 24
	mov	DWORD PTR [esp], eax
	call	_outStr
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 182
	mov	DWORD PTR [esp+8], 38
	mov	DWORD PTR [esp+4], 7
	lea	eax, [ebp-104]
	add	eax, 48
	mov	DWORD PTR [esp], eax
	call	_outStr
	mov	DWORD PTR [esp+16], 1
	mov	DWORD PTR [esp+12], 182
	mov	DWORD PTR [esp+8], 38
	mov	DWORD PTR [esp+4], 13
	lea	eax, [ebp-104]
	add	eax, 72
	mov	DWORD PTR [esp], eax
	call	_outStr
	sub	esp, -128
	pop	ebx
	.cfi_restore 3
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE10:
	.globl	_drawFillRect
	.def	_drawFillRect;	.scl	2;	.type	32;	.endef
_drawFillRect:
LFB11:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	esi
	push	ebx
	sub	esp, 76
	mov	edi, DWORD PTR [ebp+8]
	.cfi_offset 3, -20
	.cfi_offset 6, -16
	.cfi_offset 7, -12
	mov	esi, DWORD PTR [ebp+12]
	mov	ebx, DWORD PTR [ebp+16]
	mov	ecx, DWORD PTR [ebp+20]
	mov	edx, DWORD PTR [ebp+24]
	mov	eax, DWORD PTR [ebp+28]
	mov	WORD PTR [ebp-44], di
	mov	WORD PTR [ebp-48], si
	mov	WORD PTR [ebp-52], bx
	mov	WORD PTR [ebp-56], cx
	mov	WORD PTR [ebp-60], dx
	mov	WORD PTR [ebp-64], ax
	mov	eax, DWORD PTR [ebp-44]
	mov	WORD PTR [ebp-26], ax
	jmp	L43
L47:
	mov	eax, DWORD PTR [ebp-48]
	mov	WORD PTR [ebp-28], ax
	jmp	L44
L46:
	movzx	ebx, WORD PTR [ebp-28]
	movzx	ecx, WORD PTR [ebp-26]
	movzx	edx, WORD PTR [ebp-60]
	movzx	eax, WORD PTR [ebp-64]
	mov	DWORD PTR [esp+12], ebx
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPix
	movzx	eax, WORD PTR [ebp-44]
	movzx	ecx, WORD PTR [ebp-44]
	movzx	edx, WORD PTR [ebp-56]
	add	edx, ecx
	dec	edx
	cmp	eax, edx
	je	L45
	movzx	eax, WORD PTR [ebp-48]
	movzx	ecx, WORD PTR [ebp-48]
	movzx	edx, WORD PTR [ebp-52]
	add	edx, ecx
	dec	edx
	cmp	eax, edx
	je	L45
/APP
 # 273 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
L45:
	inc	WORD PTR [ebp-28]
L44:
	movzx	eax, WORD PTR [ebp-28]
	movzx	ecx, WORD PTR [ebp-48]
	movzx	edx, WORD PTR [ebp-52]
	add	edx, ecx
	cmp	eax, edx
	jl	L46
	inc	WORD PTR [ebp-26]
L43:
	movzx	eax, WORD PTR [ebp-26]
	movzx	ecx, WORD PTR [ebp-44]
	movzx	edx, WORD PTR [ebp-56]
	add	edx, ecx
	cmp	eax, edx
	jl	L47
	add	esp, 76
	pop	ebx
	.cfi_restore 3
	pop	esi
	.cfi_restore 6
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE11:
	.globl	_setVmode
	.def	_setVmode;	.scl	2;	.type	32;	.endef
_setVmode:
LFB12:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	sub	esp, 40
	mov	eax, DWORD PTR [ebp+8]
	mov	WORD PTR [ebp-12], ax
	cmp	WORD PTR [ebp-12], 19
	ja	L49
	movzx	eax, WORD PTR [ebp-12]
	mov	DWORD PTR [esp], eax
	call	_VideoMode
	jmp	L50
L49:
	cmp	WORD PTR [ebp-12], 255
	jbe	L51
	cmp	WORD PTR [ebp-12], 268
	ja	L51
	movzx	eax, WORD PTR [ebp-12]
	mov	DWORD PTR [esp], eax
	call	_VideoVesa
	jmp	L50
L51:
	mov	eax, 1
	jmp	L52
L50:
	mov	eax, 0
L52:
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE12:
	.globl	_drawRect
	.def	_drawRect;	.scl	2;	.type	32;	.endef
_drawRect:
LFB13:
	.cfi_startproc
	push	ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	mov	ebp, esp
	.cfi_def_cfa_register 5
	push	edi
	push	esi
	push	ebx
	sub	esp, 92
	mov	eax, DWORD PTR [ebp+8]
	mov	DWORD PTR [ebp-72], eax
	mov	edi, DWORD PTR [ebp+12]
	.cfi_offset 3, -20
	.cfi_offset 6, -16
	.cfi_offset 7, -12
	mov	esi, DWORD PTR [ebp+16]
	mov	ebx, DWORD PTR [ebp+20]
	mov	ecx, DWORD PTR [ebp+24]
	mov	edx, DWORD PTR [ebp+28]
	mov	eax, DWORD PTR [ebp+32]
	mov	DWORD PTR [ebp-76], eax
	mov	eax, DWORD PTR [ebp-72]
	mov	WORD PTR [ebp-44], ax
	mov	WORD PTR [ebp-48], di
	mov	WORD PTR [ebp-52], si
	mov	WORD PTR [ebp-56], bx
	mov	WORD PTR [ebp-60], cx
	mov	WORD PTR [ebp-64], dx
	mov	eax, DWORD PTR [ebp-76]
	mov	WORD PTR [ebp-68], ax
	mov	WORD PTR [ebp-28], 0
	jmp	L54
L63:
	mov	eax, DWORD PTR [ebp-44]
	mov	WORD PTR [ebp-26], ax
	jmp	L55
L56:
	movzx	ebx, WORD PTR [ebp-48]
	movzx	ecx, WORD PTR [ebp-26]
	movzx	edx, WORD PTR [ebp-60]
	movzx	eax, WORD PTR [ebp-64]
	mov	DWORD PTR [esp+12], ebx
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPix
/APP
 # 294 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	inc	WORD PTR [ebp-26]
L55:
	movzx	eax, WORD PTR [ebp-26]
	movzx	ecx, WORD PTR [ebp-44]
	movzx	edx, WORD PTR [ebp-56]
	add	edx, ecx
	cmp	eax, edx
	jl	L56
	mov	eax, DWORD PTR [ebp-48]
	mov	WORD PTR [ebp-26], ax
	jmp	L57
L58:
	movzx	ebx, WORD PTR [ebp-26]
	mov	eax, DWORD PTR [ebp-56]
	mov	edx, DWORD PTR [ebp-44]
	add	eax, edx
	movzx	ecx, ax
	movzx	edx, WORD PTR [ebp-60]
	movzx	eax, WORD PTR [ebp-64]
	mov	DWORD PTR [esp+12], ebx
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPix
/APP
 # 299 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	inc	WORD PTR [ebp-26]
L57:
	movzx	eax, WORD PTR [ebp-26]
	movzx	ecx, WORD PTR [ebp-48]
	movzx	edx, WORD PTR [ebp-52]
	add	edx, ecx
	cmp	eax, edx
	jl	L58
	mov	eax, DWORD PTR [ebp-56]
	mov	edx, DWORD PTR [ebp-44]
	add	eax, edx
	mov	WORD PTR [ebp-26], ax
	jmp	L59
L60:
	mov	eax, DWORD PTR [ebp-52]
	mov	edx, DWORD PTR [ebp-48]
	add	eax, edx
	movzx	ebx, ax
	movzx	ecx, WORD PTR [ebp-26]
	movzx	edx, WORD PTR [ebp-60]
	movzx	eax, WORD PTR [ebp-64]
	mov	DWORD PTR [esp+12], ebx
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPix
/APP
 # 304 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	dec	WORD PTR [ebp-26]
L59:
	mov	ax, WORD PTR [ebp-26]
	cmp	ax, WORD PTR [ebp-44]
	ja	L60
	mov	eax, DWORD PTR [ebp-52]
	mov	edx, DWORD PTR [ebp-48]
	add	eax, edx
	mov	WORD PTR [ebp-26], ax
	jmp	L61
L62:
	movzx	ebx, WORD PTR [ebp-26]
	movzx	ecx, WORD PTR [ebp-44]
	movzx	edx, WORD PTR [ebp-60]
	movzx	eax, WORD PTR [ebp-64]
	mov	DWORD PTR [esp+12], ebx
	mov	DWORD PTR [esp+8], ecx
	mov	DWORD PTR [esp+4], edx
	mov	DWORD PTR [esp], eax
	call	_setPix
/APP
 # 309 "main.c" 1
	add sp,2
 # 0 "" 2
/NO_APP
	dec	WORD PTR [ebp-26]
L61:
	mov	ax, WORD PTR [ebp-26]
	cmp	ax, WORD PTR [ebp-48]
	ja	L62
	inc	WORD PTR [ebp-48]
	inc	WORD PTR [ebp-44]
	sub	WORD PTR [ebp-56], 2
	sub	WORD PTR [ebp-52], 2
	inc	WORD PTR [ebp-28]
L54:
	mov	eax, DWORD PTR [ebp-28]
	cmp	ax, WORD PTR [ebp-68]
	jb	L63
	add	esp, 92
	pop	ebx
	.cfi_restore 3
	pop	esi
	.cfi_restore 6
	pop	edi
	.cfi_restore 7
	pop	ebp
	.cfi_def_cfa 4, 4
	.cfi_restore 5
	ret
	.cfi_endproc
LFE13:
	.def	_getKey;	.scl	2;	.type	32;	.endef
	.def	_powOff;	.scl	2;	.type	32;	.endef
	.def	_setPage;	.scl	2;	.type	32;	.endef
	.def	_setAlarm;	.scl	2;	.type	32;	.endef
	.def	_setPos;	.scl	2;	.type	32;	.endef
	.def	_setChar;	.scl	2;	.type	32;	.endef
	.def	_outTime;	.scl	2;	.type	32;	.endef
	.def	_hardType;	.scl	2;	.type	32;	.endef
	.def	_countDrives;	.scl	2;	.type	32;	.endef
	.def	_setPix;	.scl	2;	.type	32;	.endef
	.def	_VideoMode;	.scl	2;	.type	32;	.endef
	.def	_VideoVesa;	.scl	2;	.type	32;	.endef
